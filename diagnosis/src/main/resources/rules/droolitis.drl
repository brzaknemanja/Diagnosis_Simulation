package rules

import com.diagnosis.sbnz.model.Patient
import com.diagnosis.sbnz.model.Illness
import com.diagnosis.sbnz.model.PatientLifeFact
import com.diagnosis.sbnz.model.Examination
import com.diagnosis.sbnz.model.PotentialDamage
import com.diagnosis.sbnz.model.DangerousPatientSituation
import com.diagnosis.sbnz.model.Therapy
import com.diagnosis.sbnz.model.MedicalProcedure

import com.diagnosis.sbnz.model.enums.SymptomType
import com.diagnosis.sbnz.model.enums.IllnessType
import com.diagnosis.sbnz.model.enums.ExaminationType
import com.diagnosis.sbnz.model.enums.FactType
import com.diagnosis.sbnz.model.enums.PotentialDamageType
import com.diagnosis.sbnz.model.enums.TherapyType
import com.diagnosis.sbnz.model.enums.PatientHealthState
import com.diagnosis.sbnz.model.enums.MedicalProcedureType

import com.diagnosis.sbnz.events.DangerousSituationEvent

rule "Droolitis illness progression phase 2"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 1) from $patient.illness
		eval($patient.getIllnessProgressionCoefficient() >= 3)
	then
		$patient.getIllness().increaseIllnessPhase();
		update($patient)
	end
	
rule "Droolitis illness progression phase 3"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 2) from $patient.illness
		eval($patient.getIllnessProgressionCoefficient() >= 5)
	then
		$patient.getIllness().increaseIllnessPhase();
		update($patient)
	end
	
rule "Droolitis illness progression phase 4"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 3) from $patient.illness
		eval($patient.getIllnessProgressionCoefficient() >= 10)
	then
		$patient.getIllness().increaseIllnessPhase();
		update($patient)
	end
	
rule "Droolitis illness progression phase 5"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 4) from $patient.illness
		eval($patient.getIllnessProgressionCoefficient() >= 14)
	then
		$patient.getIllness().increaseIllnessPhase();
		update($patient)
	end
	
rule "Droolitis illness progression phase 6"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 5) from $patient.illness
		eval($patient.getIllnessProgressionCoefficient() >= 18)
	then
		$patient.getIllness().increaseIllnessPhase();
		update($patient)
	end
	
rule "Droolitis illness progression phase 7"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 6) from $patient.illness
		eval($patient.getIllnessProgressionCoefficient() >= 24)
	then
		$patient.getIllness().increaseIllnessPhase();
		update($patient)
	end


rule "A - Droolitis phase 1 symptoms"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 1 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.Tiredness))
		eval(!$patient.getSymptoms().contains(SymptomType.Caughing))
	then
		$patient.addSymptom(SymptomType.Tiredness);
		$patient.addSymptom(SymptomType.Caughing);
		$patient.getPatientState().getBloodParameters().setLeukocytes(10f);
		update($patient)
	end
		
rule "A - Droolitis phase 2 symptoms"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 2 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.ShortnessBreath))
	then
		$patient.addSymptom(SymptomType.ShortnessBreath);
		update($patient)
	end
	
rule "A - Droolitis phase 3 symptoms"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 3 ) from $patient.illness
	then
		$patient.getPatientState().setOxygenSaturation(0.85f);	
		update($patient)
	end

rule "A - Droolitis phase 3 symptoms hearth damaged"
	lock-on-active
	when 
		$patient : Patient($potentialDamages: potentialDamages)
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 3 ) from $patient.illness
		Number($value: intValue >= 2) from accumulate(
			PotentialDamage($t:this, damageType == PotentialDamageType.Hearth) from $potentialDamages,
			count($t)
		)
		eval(!$patient.getSymptoms().contains(SymptomType.Arrhythmia))
		eval(!$patient.getSymptoms().contains(SymptomType.Dizziness))
	then
		$patient.addSymptom(SymptomType.Arrhythmia);
		$patient.addSymptom(SymptomType.Dizziness);
	end
	
	
rule "A - Droolitis phase 5 symptoms"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 5 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.CardiacArrest))
	then
		PotentialSymptom potentialSymptom = new PotentialSymptom();
		potentialSymptom.setSymptom(SymptomType.CardiacArrest);
		insert(potentialSymptom);
	end
	
	
rule "A - Droolitis phase 7 symptoms"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 5 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.ChestPain))
	then
		$patient.addSymptom(SymptomType.ChestPain);
		$patient.getPatientState().getBloodParameters().setLeukocytes(20f);
		update($patient)
	end
	
rule "B - Therapy Drooliticin"
	when 
		$therapy : Therapy(therapyType == TherapyType.Drooliticin)
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase < 8 ) from $patient.illness
	then
		$patient.setCurrentPatientHealthState(PatientHealthState.Cured);
		$patient.getTherapies().add($therapy);
	end

rule "B - Therapy Mitomicin"
	when 
		$therapy : Therapy(therapyType == TherapyType.Mitomicin)
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase < 8 ) from $patient.illness
	then
		$patient.setCurrentPatientHealthState(PatientHealthState.Dead);
		$patient.getTherapies().add($therapy);
	end
	

declare PotentialSymptom
	symptom: SymptomType
end

rule "D - Potential cardiac arrest"
	when 
		$patient : Patient($potentialDamages: potentialDamages)
		$potentialSymptom : PotentialSymptom(symptom == SymptomType.CardiacArrest)
		Number($value: intValue >= 2) from accumulate(
			PotentialDamage($t:this, damageType == PotentialDamageType.Hearth) from $potentialDamages,
			count($t)
		)
	then
		DangerousPatientSituation dangerousSituation = new DangerousPatientSituation(SymptomType.CardiacArrest);
		$patient.getDangerousPatientSituations().add(dangerousSituation);
		$patient.setCurrentDangerousSituation(dangerousSituation);
		$patient.addSymptom(SymptomType.CardiacArrest);
	end
		

rule "D - Potential symptom caughing blood from lung damage"
	when 
		$patient : Patient($potentialDamages: potentialDamages)
		$potentialSymptom : PotentialSymptom(symptom == SymptomType.CaughingBlood)
		Number($value: intValue >= 2) from accumulate(
			PotentialDamage($t:this, damageType == PotentialDamageType.Lungs) from $potentialDamages,
			count($t)
		)
	then
		DangerousPatientSituation dangerousSituation = new DangerousPatientSituation(SymptomType.CaughingBlood);
		$patient.getDangerousPatientSituations().add(dangerousSituation);
		$patient.setCurrentDangerousSituation(dangerousSituation);
	end
	
rule "Suction procedure for caughing blood"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.CaughingBlood) from $patient.dangerousPatientSituations
		$illness: Illness(illnessType == IllnessType.Droolitis) from $patient.illness
		$procedure: MedicalProcedure(procedureType == MedicalProcedureType.Suction)
	then
		$patient.removeDangerousSituation(SymptomType.CaughingBlood);
		$patient.setCurrentDangerousSituation(null);
		$patient.removeDangerousSituationEvents(SymptomType.CaughingBlood);
	end


rule "Event - raise dangerous event for caughing blood"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.CaughingBlood) from $patient.dangerousPatientSituations
	then
		$patient.getDangerousSituationEvents().add(new DangerousSituationEvent($dangerousSituation.getDangerousSymptom()));
	end
	
rule "Event - react to dangerous event for caughing blood"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.CaughingBlood) from $patient.dangerousPatientSituations
		$d1: DangerousSituationEvent(symptom ==SymptomType.CaughingBlood, $eventSymptom: symptom) from $patient.dangerousSituationEvents
		Number(intValue >= 6) from accumulate(
            $d2: DangerousSituationEvent(
                this != $d1, 
                symptom == $eventSymptom, 
                this meets[20s] $d1
            ) from $patient.dangerousSituationEvents,
            count($d2)
        )
    	not(DangerousPatientSituation(dangerousSymptom == SymptomType.LungsStopped) from $patient.dangerousPatientSituations)
    then
    	DangerousPatientSituation dangerousSituation = new DangerousPatientSituation(SymptomType.LungsStopped);
    	modify($patient).
    	{
    		getDangerousPatientSituations().add(dangerousSituation),
    		setCurrentDangerousSituation(dangerousSituation),
    		removeDangerousSituation(SymptomType.CaughingBlood),
    		removeDangerousSituationEvents(SymptomType.CaughingBlood)
    	}
    end
    
rule "Event - raise dangerous event for lungs stopped"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.LungsStopped) from $patient.dangerousPatientSituations
	then
		$patient.getDangerousSituationEvents().add(new DangerousSituationEvent($dangerousSituation.getDangerousSymptom()));
	end
    
rule "Event - react to dangerous event for lungs stopped"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.LungsStopped) from $patient.dangerousPatientSituations
		$d1: DangerousSituationEvent(symptom ==SymptomType.LungsStopped, $eventSymptom: symptom) from $patient.dangerousSituationEvents
		Number(intValue >= 6) from accumulate(
            $d2: DangerousSituationEvent(
                this != $d1, 
                symptom == $eventSymptom, 
                this meets[1m] $d1
            ) from $patient.dangerousSituationEvents,
            count($d2)
        )
    	eval($patient.getCurrentPatientHealthState() != PatientHealthState.Dead)
    then
    	$patient.setCurrentPatientHealthState(PatientHealthState.Dead);
    	$patient.setCurrentDangerousSituation(null);
    end
    
rule "Intubation procedure for respiratory failure"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.LungsStopped) from $patient.dangerousPatientSituations
		$illness: Illness(illnessType == IllnessType.Droolitis) from $patient.illness
		$procedure: MedicalProcedure(procedureType == MedicalProcedureType.Intubation)
	then
		$patient.removeDangerousSituation(SymptomType.LungsStopped);
		$patient.setCurrentDangerousSituation(null);
		$patient.removeDangerousSituationEvents(SymptomType.LungsStopped);
	end
	
rule "Defibrilator procedure for cardiac arrest"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.CardiacArrest) from $patient.dangerousPatientSituations
		$illness: Illness(illnessType == IllnessType.Droolitis) from $patient.illness
		$procedure: MedicalProcedure(procedureType == MedicalProcedureType.Defibrillation)
	then
		$patient.removeDangerousSituation(SymptomType.CardiacArrest);
		$patient.setCurrentDangerousSituation(null);
		$patient.removeDangerousSituationEvents(SymptomType.CardiacArrest);
	end
	
