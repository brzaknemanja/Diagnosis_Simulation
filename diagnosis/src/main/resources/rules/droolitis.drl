package rules

import com.diagnosis.sbnz.model.Patient
import com.diagnosis.sbnz.model.Illness
import com.diagnosis.sbnz.model.PatientLifeFact
import com.diagnosis.sbnz.model.Examination
import com.diagnosis.sbnz.model.PotentialDamage
import com.diagnosis.sbnz.model.enums.SymptomType
import com.diagnosis.sbnz.model.enums.IllnessType
import com.diagnosis.sbnz.model.enums.ExaminationType
import com.diagnosis.sbnz.model.enums.FactType
import com.diagnosis.sbnz.model.enums.PotentialDamageType
import com.diagnosis.sbnz.events.DangerousSituationEvent
import com.diagnosis.sbnz.model.DangerousPatientSituation

rule "A - Droolitis phase 1"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 1 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.Tiredness))
		eval(!$patient.getSymptoms().contains(SymptomType.Caughing))
	then
		$patient.addSymptom(SymptomType.Tiredness);
		$patient.addSymptom(SymptomType.Caughing);
		update($patient)
	end
		
rule "A - Droolitis phase 2"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 2 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.ShortnessBreath))
	then
		$patient.addSymptom(SymptomType.ShortnessBreath);
		update($patient)
	end
	
rule "A - Droolitis phase 3"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 3 ) from $patient.illness
	then
		$patient.getPatientState().setOxygenSaturation(0.85f);	
		update($patient)
	end
	
rule "A - Droolitis phase 5"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 5 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.CaughingBlood))
	then
		$patient.addSymptom(SymptomType.CaughingBlood);
		update($patient)
	end
	
rule "A - Droolitis phase 7"
	lock-on-active
	when 
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase == 7 ) from $patient.illness
		eval(!$patient.getSymptoms().contains(SymptomType.ChestPain))
	then
		$patient.addSymptom(SymptomType.ChestPain);
		update($patient)
	end
	
	
rule "B - MRI Examination"
	when 
		$examination : Examination(examinationType == ExaminationType.MRI)
		$patient : Patient()
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 3 ) from $patient.illness
	then
		$examination.getResults().add("multiple masses");
		$examination.getResults().add("damaged lungs");
		$patient.getExaminations().add($examination);
	end

// ovde ubaciti potencijalno gusenje ukoliko jos nesto utice na pluca pacijenta iz life facts
rule "B - Spirometry Examination"
	when 
		$examination : Examination(examinationType == ExaminationType.Spirometry)
		$patient : Patient(patientState.getOxygenSaturation() < 0.95)
		$illness: Illness(illnessType == IllnessType.Droolitis, illnessPhase >= 3 ) from $patient.illness
	then
		$examination.getResults().add("lower lung capacity");
		$patient.getExaminations().add($examination);
		
		// insert potential symptom = due lung pressure masses can burst and patient can start caughing blood
		PotentialSymptom potentialSymptom = new PotentialSymptom();
		potentialSymptom.setSymptom(SymptomType.CaughingBlood);
		insert(potentialSymptom);
	end
	

declare PotentialSymptom
	symptom: SymptomType
end

rule "D - Potential symptom caughing blood from lung damage"
	when 
		$patient : Patient($potentialDamages: potentialDamages)
		$potentialSymptom : PotentialSymptom(symptom == SymptomType.CaughingBlood)
		Number($value: intValue >= 2) from accumulate(
			PotentialDamage($t:this, damageType == PotentialDamageType.Lungs) from $potentialDamages,
			count($t)
		)
	then
		$patient.addSymptom(SymptomType.CaughingBlood);
		$patient.getDangerousPatientSituations().add(new DangerousPatientSituation(SymptomType.CaughingBlood));
	end


rule "Event - raise dangerous event for caughing blood"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.CaughingBlood) from $patient.dangerousPatientSituations
		not(DangerousPatientSituation(dangerousSymptom == SymptomType.LungsStopped) from $patient.dangerousPatientSituations)
	then
		$patient.getDangerousSituationEvents().add(new DangerousSituationEvent($dangerousSituation.getDangerousSymptom()));
	end
	
rule "Event - react to dangerous event for caughing blood"
	when
		$patient : Patient()
		$dangerousSituation : DangerousPatientSituation(dangerousSymptom == SymptomType.CaughingBlood) from $patient.dangerousPatientSituations
		$d1: DangerousSituationEvent($eventSymptom: symptom) from $patient.dangerousSituationEvents
		Number(intValue >= 2) from accumulate(
            $d2: DangerousSituationEvent(
                this != $d1, 
                symptom == $eventSymptom, 
                this meets[1m] $d1
            ) from $patient.dangerousSituationEvents,
            count($d2)
        )
    	not(DangerousPatientSituation(dangerousSymptom == SymptomType.LungsStopped) from $patient.dangerousPatientSituations)
    then
    	modify($patient).
    	{
    		getDangerousPatientSituations().add(new DangerousPatientSituation(SymptomType.LungsStopped));
    	}
    end
	
